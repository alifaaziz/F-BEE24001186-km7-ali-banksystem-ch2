// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String
  email          String        @unique
  password       String
  bankAccounts   BankAccount[]
  profile        Profile?
  image          Image?        // Relasi ke Image (satu ke satu)

  otp            String?       
  otpExpiresAt   DateTime?
  notifications Notification[]
  resetPasswordToken String?   @unique
  resetPasswordExpiresAt DateTime? 
  
  @@map("users")
}

model BankAccount {
  id                Int           @id @default(autoincrement())
  user              User          @relation(fields: [userId], references: [id])
  userId            Int
  bankName          String
  bankAccountNumber String        @unique
  balance           Float         @default(0)
  transactionsFrom  Transaction[] @relation("sourceAccount")
  transactionsTo    Transaction[] @relation("destinationAccount")
  
  @@map("bankaccounts")
}

model Transaction {
  id                  Int          @id @default(autoincrement())
  sourceAccount       BankAccount  @relation("sourceAccount", fields: [sourceAccountId], references: [id])
  sourceAccountId     Int
  destinationAccount  BankAccount  @relation("destinationAccount", fields: [destinationAccountId], references: [id])
  destinationAccountId Int
  amount              Float

  @@map("transactions")
}

model Profile {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int      @unique
  identityType     String
  identityNumber   String
  address          String

  @@map("profiles")
}

model Image {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  imageUrl    String
  userId      Int     @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id])

  @@map("images")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  @@map("notifications")
}